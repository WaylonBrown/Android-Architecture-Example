apply plugin: 'com.android.application'
apply plugin: 'me.tatarka.retrolambda'

def versionMajor = 1
def versionMinor = 0
def versionPatch = 0
def versionBuild = 0 // bump for dogfood builds, public betas, etc.

// TODO: set up with CI
def isCi = 'true'.equals(System.getenv('CI'))

def gitSha() {
    def p = 'git rev-parse --short HEAD'.execute([], project.rootDir)
    p.waitFor()
    if (p.exitValue() != 0) {
        throw new RuntimeException(p.errorStream.text)
    }

    return p.text.trim()
}

def gitTimestamp() {
    def p = 'git log -n 1 --format=%at'.execute([], rootDir)
    p.waitFor()
    if (p.exitValue() != 0) {
        throw new RuntimeException(p.errorStream.text)
    }

    return p.text.trim()
}

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.2"

    //TODO: use signingConfigs
//    signingConfigs {
//        u2020 {
//            storeFile file('u2020.keystore')
//            storePassword 'android'
//            keyAlias 'android'
//            keyPassword 'android'
//        }
//    }

    defaultConfig {
        applicationId "com.redditapp"
        minSdkVersion 15
        targetSdkVersion 25

        versionCode versionMajor * 10000 + versionMinor * 1000 + versionPatch * 100 + versionBuild
        versionName "${versionMajor}.${versionMinor}.${versionPatch}"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        //signingConfig signingConfigs.u2020

        buildConfigField 'String', 'GIT_SHA', "\"${gitSha()}\""
        buildConfigField 'long', 'GIT_TIMESTAMP', "${gitTimestamp()}L"
    }

    buildTypes {
        debug {
            applicationIdSuffix '.debug'
            resValue "string", "app_name", "Reddit (Debug)"
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            resValue "string", "app_name", "Reddit App"
        }
    }

    lintOptions {
        textReport true
        textOutput 'stdout'
        fatal 'UnusedResources'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    dataBinding {
        dependencies {
            /**
             * Added automatically
             */
            compile fileTree(dir: 'libs', include: ['*.jar'])

            androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
                exclude group: 'com.android.support', module: 'support-annotations'
            })
            compile 'com.android.support:appcompat-v7:25.1.0'
            compile 'com.android.support:design:25.1.0'
            compile 'com.android.support.constraint:constraint-layout:1.0.0-beta4'

            testCompile 'junit:junit:4.12'

            /**
             * I've added
             */
            compile 'com.jakewharton:butterknife:8.4.0'
            annotationProcessor 'com.jakewharton:butterknife-compiler:8.4.0'

            compile 'com.squareup.retrofit2:retrofit:2.1.0'

            compile 'io.reactivex.rxjava2:rxjava:2.0.2'
            compile 'io.reactivex.rxjava2:rxandroid:2.0.1'

            compile 'com.google.dagger:dagger:2.8'
            annotationProcessor 'com.google.dagger:dagger-compiler:2.8'

            //compile 'com.jakewharton:process-phoenix:1.1.1'

            compile 'com.jakewharton.timber:timber:4.4.0'

            debugCompile 'com.squareup.leakcanary:leakcanary-android:1.5'
            releaseCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.5'
            testCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.5'

        }
        enabled true
    }
}

